# -*- coding: utf-8 -*-
"""RADISSON HOTEL ANALYSIS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pBWJom4S5pPGdgEcCpiYxXEs38hQfA7Z
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
# import missingno as msn

# %matplotlib inline
sns.set_style('darkgrid')
matplotlib.rcParams["font.size"] = 14
matplotlib.rcParams["figure.figsize"] = (9, 5)
matplotlib.rcParams["figure.facecolor"] = "#00000000"

hotel_data = pd.read_csv("/content/RADISSON HOTEL.csv")
hotel_data.T

hotel_data.info()

hotel_data.isnull().sum().sort_values(ascending = False)


# hotel_data

hotel_data.drop('company',axis=1, inplace=True)

hotel_data.describe()

#fill null values
hotel_data["agent"]= hotel_data["agent"].fillna(hotel_data["agent"].median())
hotel_data["children"]= hotel_data["children"].fillna(hotel_data["children"].median())
hotel_data["country"]= hotel_data["country"].fillna(hotel_data["country"].mode()[0])


#replace undefined with null values

c = hotel_data['market_segment'] == 'Undefined'
hotel_data = hotel_data.replace(c,np.nan)

#total number of people visiting the hostel
hotel_data['total_people'] = hotel_data['adults'] + hotel_data['children'] + hotel_data['babies']

#remove the days in which no adults visited to get a proper representation
hotel_data = hotel_data[hotel_data['adults'] != 0]

sns.countplot(x= 'hotel',data = hotel_data)

sns.countplot(x= 'is_canceled',data = hotel_data)

sns.countplot(x= 'deposit_type',data = hotel_data)

sns.catplot(x = 'customer_type',hue ='market_segment',data = hotel_data, kind = 'count',aspect=2)
plt.title('Count of customer type')
plt.xticks(rotation=30);

sns.catplot(x = 'reservation_status',data = hotel_data, kind = 'count')
plt.title('Count of reservation status')
plt.xticks(rotation=30);

hotel_data['arrival_date_month'].value_counts(ascending= True).plot(kind ='bar')
plt.title('Arrival of people in each month')
plt.xlabel('Months')
plt.ylabel('Total number of people')
plt.xticks(rotation=30);

# condition = hotel_data['market_segment'] != 'Undefined'

plt.figure(figsize=(8,6))
plt.xticks(rotation= 60)
segment = hotel_data['market_segment'].value_counts()

plt.bar(x= segment.index, height= segment,)
plt.xlabel('Segments')
plt.ylabel('Total count')
plt.title('Market Segment')
plt.show()


#remove undefined from this column

sns.catplot(x = 'reserved_room_type',data = hotel_data, kind = 'count', order =['A','B','C','D','E','F','G','H','L','P'])
plt.title('Count of reserved rooms')
# plt.xticks(rotation=30);

hotel_data["reservation_status_date"] = pd.to_datetime(hotel_data["reservation_status_date"])

# Extract date features
def extract_date_info(df, cols):
    for feat in cols:
        df[feat + "_year"] = df[feat].dt.year
        df[feat + "_day"] = df[feat].dt.day
        df[feat + "_month"] = df[feat].dt.month
        df[feat + "_quarter"] = df[feat].dt.quarter
        df[feat + "_weekday"] = df[feat].dt.weekday
        df[feat + "_week"] = df[feat].dt.isocalendar().week
    df.drop(columns=cols,axis=1,inplace=True)


extract_date_info(hotel_data, ["reservation_status_date"])


date_dic = {
    "January" : 1,
    "February" : 2,
    "March" :3 ,
    "April" :4,
    "May" : 5,
    "June" : 6,
    "July" : 7,
    "August" : 8,
    "September" : 9,
    "October" : 10,
    "November" : 11,
    "December" : 12,
}


# hotel_data

sns.catplot(y= 'lead_time', x = 'is_canceled', data = hotel_data, kind = 'box',)

plt.figure(figsize=(20,15))
sns.catplot(data = hotel_data, x ='customer_type' , y= 'arrival_date_day_of_month' ,kind='box')
plt.show();

# sns.catplot(x = 'arrival_date_month', y = 'stays_in_week_nights',data = hotel_data, kind = 'bar')
# hotel_data  customer_type

sns.catplot(data = hotel_data, x ='hotel' , y= 'lead_time' ,kind='box')

hotel_data["arrival_date_month"] = hotel_data["arrival_date_month"].map(date_dic)

# f = hotel_data.groupby('arrival_date_month')['is_canceled'].mean().plot(kind='pie')
# f.sort_values()

con =  hotel_data['is_canceled'] == 1

hotel_data[con]['arrival_date_month'].value_counts().plot(kind = 'bar')

hotel_data[hotel_data['is_canceled'] == 1]['customer_type'].value_counts().plot(kind = 'bar')

hotel_data['meal'].agg(['value_counts'])

meal = ["BB", "HB", "SC", "Undefined", "FB"]
values = hotel_data.meal.value_counts()

plt.figure(figsize = (10, 7))
plt.pie(values, labels = meal, explode = (0.1, 0, 0.1, 0.2, 0.4), autopct = "%.2f%%",startangle = 90);

plt.legend()

plt.show();

hotel_data['arrival_date_year'].agg(['value_counts'])

year=['2016','2017','2018']
vals = hotel_data['arrival_date_year'].value_counts()

plt.title('The busiest year')
plt.pie(vals,labels = year,autopct = "%.2f%%" );

fre_country = hotel_data[hotel_data['is_repeated_guest'] == 1]['country'].value_counts().reset_index()

#Select countries with visitors more than 20
fre_country = fre_country[fre_country['country'] > 20 ].set_index('index')

plt.title('The countries of the most frequent visitors')
plt.bar(height= fre_country.country, x = fre_country.index)
plt.xlabel('Countries')
plt.ylabel('Number of visitors')
plt.show();

segment =  hotel_data.groupby('market_segment')['stays_in_weekend_nights'].count().sort_values(ascending = False)

plt.title('Market segment with the hieghest weekend night stay')
plt.bar(height= segment, x = segment.index)
plt.xlabel('Market segment')
plt.ylabel('Count of weekend night stay')
plt.xticks(rotation = 30)
plt.show();

meals = hotel_data[hotel_data['is_repeated_guest'] == 1]['meal'].value_counts()
meal_label = ["BB", "HB", "SC", "Undefined", "FB"]


plt.bar(x = meal_label, height=meals )

# plt.pie(meals, labels=meal_label ,autopct = "%.2f%%", explode = (0.1,0.2,0.3,0.4,1))
plt.show()